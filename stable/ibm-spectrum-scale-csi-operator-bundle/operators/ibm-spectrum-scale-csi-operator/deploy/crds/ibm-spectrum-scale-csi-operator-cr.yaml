apiVersion: csi.ibm.com/v1
kind: 'CSIScaleOperator'
metadata:
    name: 'ibm-spectrum-scale-csi'
    namespace: 'ibm-spectrum-scale-csi-driver'
    app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
    release: ibm-spectrum-scale-csi-operator
status: {}
spec:
# OPTIONAL:
# --------
# IMAGES:

# Attacher image name, in case we do not want to use default image.
  attacher: "quay.io/k8scsi/csi-attacher:v1.0.0"

# Provisioner image name, in case we do not want to use default image.
  provisioner: "quay.io/k8scsi/csi-provisioner:v1.0.0"

# Driver Registrar image name, in case we do not want to use default image.
  driverRegistrar: "quay.io/k8scsi/csi-node-driver-registrar:v1.0.1'"

# SpectrumScale CSI Plugin image name, in case we do not want to use default
# image.
  spectrumScale: "quay.io/ibm-spectrum-scale/ibm-spectrum-scale-csi-driver:v1.0.0"

# NODESELECTORS:

# attacherNodeSelector specifies on which nodes we want to run attacher sidecar
# In below example attacher will run on nodes which have label as "scale=true"
# and "infranode=2". Can have multiple entries.
  attacherNodeSelector:
    - key: "scale"
      value: "true"
    - key: "infranode"
      value: "2"

# provisionerNodeSelector specifies on which nodes we want to run provisioner
# sidecar. In below example provisioner will run on nodes which have label as
# "scale=true" and "infranode=1". Can have multiple entries.
  provisionerNodeSelector:
    - key: "scale"
      value: "true"
    - key: "infranode"
      value: "1"

# pluginNodeSelector specifies nodes on which we want to run plugin daemoset
# In below example plugin daemonset will run on nodes which have label as
# "scale=true". Can have multiple entries.
  pluginNodeSelector:
    - key: "scale"
      value: "true"

# NODEMAPPING:

# In case K8s nodes name differs from SpectrumScale nodes name, we can provide
# node mapping using nodeMapping attribute. Can have multiple entries.
  nodeMapping:
    - k8sNode: "< K8s Node Name >"
      spectrumscaleNode: "< SpectrumScale Node Name >"

# REQUIRED
# --------
# The path to the gpfs file system mounted on the host machine. 
  scaleHostpath: "< GPFS FileSystem Path >"
# Below is a details for a SpectrumScale cluster config used by plugin. It can
# have multiple values. For more details refer to cluster configuration for
# plugin.
  clusters:
    - id: "< Primary Cluster ID >"
      secrets: "< Primary Cluster Secret >"
      secureSslMode: false
      primary:
        primaryFs: "< Primary Filesystem >"
        primaryFset: "< Fileset in Primary Filesystem >"
#        inodeLimit: "< node limit for Primary Fileset >"  # Optional
#        remoteCluster: "< Remote ClusterID >" # Optional, This ID should have seperate entry in Clusters map.
#        remoteFs: "< Remote Filesystem >" #Optional
#      cacert: "< CA cert for GUI >" #Optional
      restApi: 
      - guiHost: "< Primary cluster GUI IP/Hostname >" 
# In case we have multiple cluster, it can be specified as below. It is Optional
#    - id: "< Cluster ID >"
#      secrets: "< Secret for Cluster >"
#      secureSslMode: false
#      restApi: 
#      - guiHost: "< Cluster GUI IP/Hostname >"
